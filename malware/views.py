from django.shortcuts import render
import keras
from keras.models import load_model
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
from keras.utils import np_utils
import keras
from keras.models import Sequential
from keras.layers import Dense
import os
import sklearn
scaler = StandardScaler()
encoder = LabelEncoder()
model = load_model('./models/saved_model.h5')
# Create your views here.
def index(request):
    return render(request, 'malware/index.html')

def abstract(request):
    return render(request, 'malware/abstract.html')


def predict(request):

    return render(request, 'malware/predict.html')

def result(request):
    icmp = 0
    if request.method == 'POST':
        src_bytes = float(request.POST.get('src_bytes'))
        dst_bytes = float(request.POST.get('dst_bytes'))
        logged_in = float(request.POST.get('logged_in'))
        count = float(request.POST.get('count'))
        srv_count = float(request.POST.get('srv_count'))
        same_srv_rate= float(request.POST.get('same_srv_rate'))
        diff_srv_rate = float(request.POST.get('diff_srv_rate'))
        dst_host_count = float(request.POST.get('dst_host_count'))
        dst_host_srv_count = float(request.POST.get('dst_host_srv_count'))
        dst_host_same_srv_rate = float(request.POST.get('dst_host_same_srv_rate'))
        dst_host_diff_srv_rate = float(request.POST.get('dst_host_diff_srv_rate'))
        dst_host_same_src_port_rate = float(request.POST.get('dst_host_same_src_port_rate'))
        protocol = request.POST.get('protocol')
        service = request.POST.get('service')
        flag = request.POST.get('flag')
        train = {'src_bytes': src_bytes, 'dst_bytes': dst_bytes,'logged_in': logged_in, 'count':count,'srv_count': srv_count, 'same_srv_rate':same_srv_rate,
                                 'diff_srv_rate':  diff_srv_rate,'dst_host_count': dst_host_count,'dst_host_srv_count': dst_host_srv_count,'dst_host_same_srv_rate': dst_host_same_srv_rate,'dst_host_diff_srv_rate': dst_host_diff_srv_rate,'dst_host_same_src_port_rate': dst_host_same_src_port_rate,'protocol': protocol,'service': service,'flag': flag}

        df = pd.DataFrame(train , index=[0]).transpose()
        cols = df.select_dtypes(include=['float64', 'int64']).columns
        sc_train = scaler.fit_transform(df.select_dtypes(include=['float64', 'int64']))
        sc_traindf = pd.DataFrame(sc_train, columns=cols)
        cattrain = df.select_dtypes(include=['object']).copy()
        traincat = cattrain.apply(encoder.fit_transform)
        train_x = pd.concat([sc_traindf, traincat], axis=1)

        # if (protocol == 'tcp'):
        #     protocol = 1
        #     icmp = 0
        # else:
        #     protocol = 0
        #     icmp = 1
        #
        # service = int(request.POST.get('service'))
        # flag =   int(request.POST.get('flag'))
        #
        #
        prediction = model.predict(train_x)[0]
        #
        # # output = round(prediction[0], 2)


        if prediction < 0.5:
             result="Anamoly"
        else:
             result="Normal"

        context = {'result': result}
        return render(request, 'malware/result.html', context)