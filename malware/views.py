from django.shortcuts import render
import keras
from keras.models import load_model
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
from keras.utils import np_utils
import keras
from keras.models import Sequential
from keras.layers import Dense
import os

model = load_model('./models/saved_model.h5')
# Create your views here.
def index(request):
    return render(request, 'malware/index.html')

def abstract(request):
    return render(request, 'malware/abstract.html')


def predict(request):

    return render(request, 'malware/predict.html')

def result(request):
    if request.method == 'POST':
        temp = {}
        temp['src_bytes'] = request.POST.get('src_bytes')
        temp['dst_bytes'] = request.POST.get('dst_bytes')
        temp['logged_in'] = request.POST.get('logged_in')
        temp['count'] = request.POST.get('count')
        temp['srv_count'] = request.POST.get('srv_count')
        temp['same_srv_rate'] = request.POST.get('same_srv_rate')
        temp['diff_srv_rate'] = request.POST.get('diff_srv_rate')
        temp['dst_host_count'] = request.POST.get('dst_host_count')
        temp['dst_host_srv_count'] = request.POST.get('dst_host_srv_count')
        temp['dst_host_same_srv_rate'] = request.POST.get('dst_host_same_srv_rate')
        temp['dst_host_diff_srv_count'] = request.POST.get('dst_host_diff_srv_count')
        temp['dst_host_same_src_port_rate'] = request.POST.get('dst_host_same_src_port_rate')
        temp['protocol_type'] = request.POST.get('protocol_type')
        temp['service'] = request.POST.get('service')
        temp['flag'] = request.POST.get('flag')

        temp = np.asarray(temp).astype(np.float32)

    testData = pd.DataFrame({'x': temp}).transpose()
    scoreval = model.predict(testData)[0]
    context = {'scoreval': scoreval, 'temp': temp}
    return render(request, 'predict.html', context)

#X = np.asarray(X).astype(np.float32)
#reftest['attack_class'] = reftest['attack_class'].astype(np.float64)
# reftest['protocol_type'] = reftest['protocol_type'].astype(np.float64)
# reftest['flag'] = reftest['flag'].astype(np.float64)
# reftest['service'] = reftest['service'].astype(np.float64)



